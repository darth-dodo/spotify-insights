name: 🔍 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  VITE_SPOTIFY_CLIENT_ID: 'test-client-id'
  VITE_SPOTIFY_REDIRECT_URI: 'http://localhost:3000/callback'
  VITE_USE_DUMMY_DATA: 'true'

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:run

      - name: 📊 Generate coverage report
        run: npm run test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🔍 TypeScript type checking
        run: npx tsc --noEmit

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, lint]

    strategy:
      matrix:
        build-mode: [production, development]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build application (${{ matrix.build-mode }})
        run: |
          if [ "${{ matrix.build-mode }}" = "development" ]; then
            npm run build:dev
          else
            npm run build
          fi
        env:
          VITE_SPOTIFY_CLIENT_ID: ${{ secrets.VITE_SPOTIFY_CLIENT_ID || env.VITE_SPOTIFY_CLIENT_ID }}
          VITE_SPOTIFY_REDIRECT_URI: ${{ secrets.VITE_SPOTIFY_REDIRECT_URI || env.VITE_SPOTIFY_REDIRECT_URI }}

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.build-mode }}
          path: dist/
          retention-days: 7

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level=moderate

      - name: 🔒 Check for known vulnerabilities
        run: npx audit-ci --moderate

  dependency-review:
    name: 🔍 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  e2e:
    name: 🌐 End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-production
          path: dist/

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🌐 Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  performance:
    name: ⚡ Performance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-production
          path: dist/

      - name: ⚡ Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.github/lighthouse/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [test, lint, build, security]
    if: always()

    steps:
      - name: ✅ Check job results
        run: |
          echo "Test result: ${{ needs.test.result }}"
          echo "Lint result: ${{ needs.lint.result }}"
          echo "Build result: ${{ needs.build.result }}"
          echo "Security result: ${{ needs.security.result }}"
          
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Linting failed"
            exit 1
          fi
          
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          
          echo "✅ All quality checks passed!"

      - name: 📊 Report success
        if: success()
        run: |
          echo "🎉 Quality gate passed! Ready for deployment."
          echo "📊 Statistics:"
          echo "- Tests: ✅ Passed"
          echo "- Linting: ✅ Passed"
          echo "- Build: ✅ Passed"
          echo "- Security: ✅ Passed" 